
# for i in range(1,6):
#     q.enque(i)
# for _ in range(6):
#     print(q.deque())

# push X: 정수 X를 큐에 넣는 연산이다.
# pop: 큐에서 가장 앞에 있는 정수를 빼고, 그 수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
# size: 큐에 들어있는 정수의 개수를 출력한다.
# empty: 큐가 비어있으면 1, 아니면 0을 출력한다.
# front: 큐의 가장 앞에 있는 정수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
# back: 큐의 가장 뒤에 있는 정수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.

# import sys
# input = sys.stdin.readline
# queue = []
# n = int(input())
# for _ in range(n):
#     order = input().split()
#     if order[0] == 'push':queue.append(order[1])
#     elif order[0] == 'pop':
#         if queue:
#             print(queue[0])
#             del queue[0]
#         else:print(-1)
#     elif order[0] == 'size':print(len(queue))
#     elif order[0] =='empty':print((queue == [])+0)
#     elif order[0] == 'front':
#         if queue:print(queue[0])
#         else:print(-1)
#     elif order[0] == 'back':
#         if queue:print(queue[-1])
#         else:print(-1)

#-----
# front = 0
# back = -1
# import sys
# input = sys.stdin.readline
# queue = []
# n = int(input())
# for _ in range(n):
#     order = input().split()
#     if order[0] == 'push':
#         queue.append(order[1])
#         back += 1
#     elif order[0] == 'pop':
#         if back - front == -1:
#             print(-1)
#         else:
#             print(queue[front])
#             front += 1
#     elif order[0] == 'size':
#         print(back - front + 1)
#     elif order[0] == 'empty':
#         print((back - front == -1)+0)
#     elif order[0] == 'back':
#         if back - front == -1:
#             print(-1)
#         else:
#             print(queue[back])
#     elif order[0] == 'front':
#         #비어있다면
#         if back - front == -1:
#             print(-1)
#         else:
#             print(queue[front])

# def solution(bridge_length, weight, truck_weights):
#     answer = 0
#     weiht_truck_List = []
#     front = 0
#     while truck_weights:
#         answer += 1
#         for i in range(len(weiht_truck_List)):
#             if answer - i == bridge_length:
#                 weight = weiht_truck_List[i]
#
#
#         if truck_weights[0] <= weight:
#             P = truck_weights.pop(0)
#             weight -= P
#             weiht_truck_List.append(P)
#     return answer
#
# print(solution(2,10,[7,4,5,6]))

# def solution(bridge_length, weight, truck_weights):
#     on_truck =[]
#     on_weigt = 0
#     seconds = 1
#
#     on_weigt += truck_weights[0]
#     on_truck.append([truck_weights.pop(0),seconds + bridge_length])
#     while True:
#         if seconds >= on_truck[0][1]:
#             truck = on_truck.pop(0)
#             on_weigt -= truck[0]
#         if truck_weights:
#             if on_weigt + truck_weights[0] <= weight:
#                 on_weigt += truck_weights[0]
#                 on_truck.append([truck_weights.pop(0), seconds + bridge_length])
#         if not on_truck:
#             break
#         seconds += 1
#     return seconds

def solution(priorities, location):
    answer = 0

    return answer
print(solution([2, 1, 3, 2],2))
