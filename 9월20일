#9월20일
#튜플(tuple)
# 튜플를 만들떄는 ","(컴마)로 써서 만든다
# 튜플 만드느 방법
# t1 = (1,)
#
# l1 = [1,2,3]
# t2 = tuple(l1)
#
# l3 = 1,2,3
# t3 = tuple(l3)
# print(type(t2))

# 튜플과 문자열의 공통점 (값이 변하지 않는다)
# 튜플과 리스트의 공통된 기능(인덱싱, 슬라이싱),연산(+,*)
# 튜플이랑 다를 튜플이랑 더할수 있다.
#A = (1,2,3)
#print(A * 2) # (1,2,3,1,2,3)

# 딕셔너리
# d = {}
# 딕셔너리는 인덱스 번호를 사용할수 없다 (d[x]라고 사용할수 있어도 x가 인덱스 번호는 아니다)
#추가
#d["A"] = 1
#print(d)   # {A:1}
# 수정
# d["A"] = 5
# d["B"] = 3
#print(d) # {A:1=>5}
#삭제
#del d["A"]
#print(d) #{}

#관련함수
# Keys 딕셔너리에서 키값들만 모아주는 함수
# values() 딕셔너리에서 벨류값 들만 모아주는 함수
# print("A" in d.keys()) # 문자 "A"가 키값 안에 있는지
# print("A" in d.values()) # 문자 "A"가 벨룰값 안에 있는지
# for 문 써서 d의 벨루값 불러오기

# for i in d:
    #print(d[i])
# for i in d.values()
    #print(i)

# 집합(set)
# 중복된 값을 허용하지 않는다
# 순서가 없다 (그러므로 인덱스를 사용할수 없다.)
# s1 = {"B","A","C"}
#print(type(s1))
#l1 = [3,4,3,3,3,2,2,1,2,3,2,1,1]
#s2 = set(l1)
# A = {1,2,3,4,6}
# B = {2,4,6,7}
# 합집합
# A|B = 1,2,3,4,6,7
# 차집합
# A-B = 1,3,6
# 교집합
# A&B = 2,4,6

# if 조건문:
#들여쓰기 #실행문
# elif 조건문:
#들여쓰기 #실행문
#else:
#들여쓰기 #실행문

# 반복문
#  for문        --> range(n) 0~(n-1)
# for 변수 in --|
#               --> 리스트,딕셔너리(키값),튜플,문자열
#for i in range(X,Y,Z): X부터 Y까 인덱스 번호를 Z번 증가 시키 겠다.
#        print(i)

# while문
# coninve 밑에 있는 코드가 실행되지는 않고 처음으로 돌아온다
# blake while문을 탈출한다.
