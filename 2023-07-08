# # class Test:
# #     # 생성자함수 __init__은 객체 생성자 가장 먼저 실행되는 함수
# #     # 클래스에 필요한 정보들을 넘겨준다
# #     def __init__(self):
# #         print("생성자 함수 실행")
# # t = Test() # Test클래스를 이용해서 t라는 객체 생성
#
# # class AAA:
# #     share = 10
# #     def __init__(self,value):
# #         self.unique = value
# # a = AAA(1)
# # b = AAA(2)
# # print(a == b)
# # print(a.unique == b.unique)
# # print(a.share == b.share)
# # AAA.share =0
# # print(a.share == b.share)
# # a.share = 5
# # print(a.share == b.share)
#
#
# #
# # class Human:
# #     def __init__(self,name,age,sex):
# #         self.name = name
# #         self.age = age
# #         self.sex = sex
# #     def who(self):
# #         print(f"이름: {self.name} 나이: {self.age}, 성별: {self.sex}")
# #     def setinfo(self,name,age,sex):
# #         self.name = name
# #         self.age = age
# #         self.sex = sex
# #
# #     def __repr__(self):
# #         return f"제 이름은 {self.name}이고 나이는 {self.age}인 {self.sex}입니다"
# #     # def __del__(self):
# #     #     print("나의 죽음을 알리지 마라")
# # areum = Human("아름", 25, "여성")
# # print(areum)
#
# # class Stock:
# #     def __init__(self,name,code,per,pbr,배당수익률):
# #             self.name = name
# #             self.code = code
# #             self.per = per
# #             self.pbr = pbr
# #             self.배당수익률 = 배당수익률
#
# # samsong = Stock("삼성전자", "005930")
# # print(samsong.name)
# # print(samsong.code)
# # print(samsong.get_name())
# # print(samsong.get_code())
# # 삼성 = Stock("삼성전자", "005930", 15.79, 1.33, 2.83)
# # print(삼성.배당수익률)
#
class Account:
    cnt = 0
    def __init__(self,예금주,초기잔액):
        self.bankname = "SC은행"
        self.account_number = "111-11-1111"
        self.owner = 예금주
        self.balance = 초기잔액
        Account.cnt += 1

    def get_account_num(self):
        print(Account.cot)

    def deposit(self,amount):
        if amount >= 1:
            self.bankname += amount
            print(f"입금되었습니다. 현재잔액:{self.balance}")
        else:
            print("1원 이상의 금액만 입금할 수 있습니다.")
    def withdraw(self,amount):
        if amount <= self.balance:
            self.balance -= amount
            print(f"출금되었습니다. 현재잔액:{self.balance}")
        else:
            print("잔액이 부족합니다.")
    def diplay_info(self):
        print(f"은행이름: {self.balance}")
        print(f"예금주: {self.owner}")
        print(f"계좌번호: {self.account_number}")
        str_balance = str(self.balance)[::-1]
        잔고 = ""
        for i in range(len(str_balance)):
            if i % 3 == 0:
                잔고 += ','
            잔고 += str_balance[i]
        print(f"잔고: {잔고[::-1][:-1]}원")

