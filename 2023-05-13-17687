# def solution(str1, str2):
#     answer = 0
#     str1 = str1.upper()
#     str2 = str2.upper()
#     str1_list = []
#     str2_list = []
#     # 합 집합 리스트
#     p_List = []
#     for i in range(len(str1)-1):
#         if str1[i:i+2].isalpha():
#             str1_list.append(str1[i:i+2])
#     for l in range(len(str2)-1):
#         if str2[l:l+2].isalpha():
#             str2_list.append(str2[l:l+2])
#
#     return answer
# print(solution('FRANCE','french'))
# print(solution('aa1+aa2','AAAA12'))

# 해설
# def J(A,B):
#     if A == B == []: return 1
#     inter = 0
#     union = 0
#     for i in set(A):
#         inter += min(A.count(i),B.count(i))
#     for i in set(A):
#         union += max(A.count(i),B.count(i))
#     for i in set(B):
#         if i not in A:
#             union += B.count(i)
#     return inter/union
#
# def solution(str1, str2):
#     str1 = str1.upper()
#     str2 = str2.upper()
#     A = []
#     B = []
#     for i in range(len(str1)-1):
#         x = (str1[i]+str1[i+1])
#         if x.isalpha():
#             A.append(x)
#     for i in range(len(str2)-1):
#         x = (str2[i]+str2[i+1])
#         if x.isalpha():
#             B.append(x)
#     return int(J(A,B)*65536)
# print(solution('FRANCE','french'))


# def GCD(A,B):
#     while A % B !=0:
#         r = A%B
#         A = B
#         B = r
#     return B
# #최소 공배수 구하는 방법 :A*B/A와B의 최대공약수
# def solution(arr):
#     A = arr.pop(0)
#     B = arr.pop(0)
#     A = A*B/ GCD(A,B)
#     while arr:
#         B = arr.pop(0)
#         A = A * B /  GCD(A,B)
#     return int(A)
#
#
# print(solution([2,6,8,14]))
# print(solution([1,2,3]))

# 진법 n, 미리 구할 숫자의 갯수 t, 게임에 참가하는 인원 m, 몆번쨰냐 p
def solution(n, t, m, p):
    for i in range(0,t*m+1,p):
        print(i)
        result = ''
        base_numer = [0,1,2,3,4,5,6,7,8,9,'a','b','c','d','e','f']
        while i:
            result += str(base_numer[(i % n)])
            i //= n
# print(solution(2,4,2,1))
# print(solution(2,4,2,1))
print(solution(16,16,2,2))
