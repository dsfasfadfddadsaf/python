#10월 8

#벌집
#1  1
#2  2-7 +6
#3  8-19 +12
#4  20-37 +18
#6의 배수마다 증가,현제방 = [(이전 숫자들)+6*(방-1)]

# def room(n):
#     layer = 1#층
#     end_room = 1 #해당 층의 마직막 방
#     while end_room < n:
#         layer += 1
#         end_room += 6 * (layer - 1)
#         #print(f"later  = {layer}, end_room = {end_room}")
#     return layer
# print(room(13))

# 설탕 배달
# def Sugar(n):
#     cnt = 0
#     while n > 0:
#         if n % 3 != 0 and n % 5 != 0:
#             cnt = -1
#             break
#         if n % 5 == 0:
#             cnt += n // 5
#             break
#         n -= 3
#         cnt +=1
#
#     return cnt
# print(Sugar(4))


# 달팽이 올라기기 문제
# e/(q - w) 하루에 올라가는 높이
#def snails(q,w,e):
    #day = 0 # 현재 날짜
    #height = 0  # 현재 높이
    # while e >= height:
    #     height  += q
    #     if height >= e:
    #         return day + 1
    #     height  -= w
    #     day += 1

# def snails_2(q,w,e):
#     return e-w // (q - w)
# print(snails_2(100,99,10000000000))


# t = int(input("t="))
# for _ in range(t):
#     K = int(input("K="))    #층
#     n = int(input("n="))    #호
#     zero = list(range(1,n+1))#0층
#     apart = [zero]
#     for i in range(1,K+1):
#         floor = []
#         for j in range(1,n+1):  #호
#             floor.append(sum(apart[i-1][:j]))
#         apart.append(floor)
#     print(apart[K][n-1])
#     print(apart)

# def solution(dartResult):
#     score = []
#     area = {"S": 1, "D": 2, "T": 3}
#     for result in dartResult:
#         if len(score) == 0:
#             score.append(result)
#         elif result.isdigit():
#             if type(score[-1]) == str:
#                 score.append(score.pop() + result)
#             else:
#                 score.append(result)
#         elif result in area:
#             score.append(int(score.pop()) ** area[result])
#         elif result == '*':
#             if len(score) == 1:
#                 score.append(int(score.pop()) * 2)
#
#             else:
#                 num2 = score.pop()
#                 num1 = score.pop()
#                 score.append(int(num1) * 2)
#                 score.append(int(num2) * 2)
#         elif result == '#':
#             score.append(int(score.pop()) * -1)
#
#     answer = sum(score)
#     return answer
#
# print(solution("1S2D*3T37"))

#문자속에 숫자들 더하기 내가 한거 미완성형
# def solution(my_string):
#     answer = 0
#     int_str = ""
#     for i in my_string:
#         if i.isdigit():
#             int_str += i
#         else:
#             if len(int_str) == 0:
#                 pass
#             else:
#                 answer += int(int_str)
#                 int_str = ""
#     return answer
# print(solution("aAb1B2cC34oOp"))

# 다항식 구하기 내가한거 미완성
# def solution(polynomial):
#     x_num = 0
#     num = 0
#     list = polynomial.replace(' ','').split("+")
#     for i in list:
#         if 'x' in i:
#             if i.isdigit():
#                 i.replace('x','')
#                 x_num += int(i)
#             else:
#                 x_num += 1
#         else:
#            #num += int(i)
#             print(i)
#     return str(x_num)+'x''+'+str(num)
# print(solution("3x + 7 + x"))

def solution(poltnomial):
    answer = ''
    poltnomial = poltnomial.replace('+','')
    p = poltnomial.split()
    constant = 0
    term1 = []
    for i in p:
        if i.isdigit():
            constant += int(i)
        else:
            term1.append(i)
    term1.sort(key= lambda x : x[-1])
    result = []
    for t in term1:
        if len(result) == 0:
            result.append(t)
        elif t[-1] == result[-1][-1]:
             last = result.pop()
             if len(t) == 1:
                 t = '1'+t
             if len(last) == 1:
                 last ='1' + last
             result.append(str(int(t[:-1])+ int(last[:-1]))+last[-1])
        else:
            result.append(t)
    for i in result:
        answer += i + ' + '
    if constant !=0:
        return answer + str(constant)
    return answer[:-3]
