# 내가 푼 코드
# def solution(progresses, speeds):
#     cnt = 0
#     answer = []
#     d = {}
#     for i in range(len(speeds)):
#         while progresses[i]  < 100:
#             progresses[i] += speeds[i]
#             cnt += 1
#
#         if not len(d) == 0:
#             for l in range(0,i):
#                 if d[l] > cnt:
#                     d[l] += 1
#         else:
#             d[cnt] = 1
#
#
#     return answer
# print(solution([93, 30, 55],[1, 30, 5]))

# def solution(progresses, speeds):
#     answer = []
#     terms = []
#     for i in range(len(progresses)):
#         t = (100 - progresses[i]) // speeds[i]
#         term = t + ((100- progresses[i]) % speeds[i] != 0)
#         terms.append(term)
#     terms.reverse()
#
#     d_day = terms.pop()
#     cnt = 1
#     while terms:
#         next = terms.pop()
#         if d_day >= next:
#             cnt += 1
#         else:
#             answer.append(cnt)
#             cnt = 1
#             d_day = next
#     answer.append(cnt)
#     return answer

# 댁
# class DequeElenment:
#     def __init__(self,data,left,right):
#         self.data = data
#         self.left = left
#         self.right = right
#
# class Deque:
#     def __init__(self):
#         self.rear = None
#         self.front = None
#
#         # rear에서 들어오는 형태
#     def insert_rear(self,data):
#         # 비어있을때와 비어있지 않을때를 구분해서 작성한다.
#         # 비어 있지 않을대
#         if self.rear is None:
#             elem = DequeElenment(data,None,None)
#             self.rear = self.front = elem
#         else:
#             elem = DequeElenment(data,None,self.rear)
#             self.rear.left = elem
#             self.rear = elem
#     def insert_front(self,data):
#         if self.front is None:
#             elem = DequeElenment(data,None,None)
#             self.rear = self.front  =elem
#         else:
#             elem = DequeElenment(data,self.front,None)
#             self.front.right = elem
#             self.front = elem
#     # 1개만 이용할때
#     def delete_rear(self):
#         if self.rear is None:
#             return None
#         elif self.rear == self.front:
#             ret_data = self.rear.data
#             self.rear = self.front = None
#             return ret_data
#         else: # 여러개 있을떄
#             ret_data = self.rear.data
#             self.rear = self.rear.right
#             self.rear.left = None
#             return ret_data
#
#     def delete_front(self):
#         if self.front is None:
#             return None
#         elif self.rear == self.front:
#             ret_data = self.front.data
#             self.rear = self.front = None
#             return ret_data
#         else:
#             ret_date = self.front.data
#             self.front = self.front.left
#             self.front.right = None
#             return ret_date
#     def reverse(self):
#         curr = self.front
#         while curr:
#             curr.left,curr.right = curr.right,curr.left
#             curr = curr.right
#         self.rear,self.front  = self.front,self.rear
#
# dq = Deque()
# for i in range(1,11):
#     if i % 2 == 0:
#         dq.insert_rear(i)
#     else:
#         dq.insert_front(i)
# for i in range(5):
#     print(dq.delete_front(), end=" -> ")
# print()
# for i in range(5):
#     print(dq.delete_rear(), end=" -> ")


#
# from collections import deque
#
# dq = deque()
# for i in range(1,11):
#     if i % 2 == 0:
#         dq.appendleft(i)
#     else:
#         dq.append(i)
# print(dq)
# dq.reverse()
# print(dq)
# for i in range(5):
#     print(dq.pop(), end = ' => ')
# for i in range(5):
#     print(dq.popleft(),end = ' => ' )
