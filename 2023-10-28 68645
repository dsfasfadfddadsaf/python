 def solution(maps):
#     answer = []
#     cnt = 0
#     m,n = len(maps),len(maps[0])
#     for y in range(m):
#         for x in range(n):
#             if maps[y][x] != 'X':
#                 if x == 0:
#                     if y == 0:
#                         if maps[y][x+1] != "X" or  maps[y+1][x] != "X":
#                             cnt += maps[y][x]
#                     elif y == len(maps[0]):
#                         if maps[y-1][x] != "X" or maps[y-1][x+1] != "X":
#                             cnt += maps[y][x]
#                     else:
#                         if maps[y][x+1] != "X" or maps[y-1][x] != "X" or maps[y+1][x] != "X":
#                             cnt += maps[y][x]
#                         else:
#                             answer.append(maps[y][x])
#                             cnt = 0
#                 elif x+1 == len(maps):
#                     if y == 0:
#                         if maps[y+1][x-1] != "X" or  maps[y+1][x] != "X":
#                             cnt = maps[y][x]
#                     elif y == len(maps[0]):
#                         if maps[y-1][x-1] != "X" or maps[y-1][x] != "X":
#                             cnt = maps[y][x]
#                     else:
#                         if maps[y-1][x] !="X" or maps[y][x-1] != "X" or maps[y+1][1]:
#                             cnt = maps[y][x]
#                         else:
#                             answer.append(maps[y][x])
#                             cnt = 0
#                 else:
#                     if maps[y+1][x] !="X" or maps[y-1][x] or maps[y][x-1] or maps[y][x+1]:
#                         cnt += maps[y][x]
#                     else:
#                         if cnt != 0:
#                             answer.append(cnt)
#                             cnt = 0
#
#                 cnt += maps[y][x]
# print(solution(["X591X",
#                 "X1X5X",
#                 "X231X",
#                 "1XXX1"]))

# from collections import deque
# def move(visit,x,y,maps,num):
#     visit[x][y] = True
#     eq = deque()
#     eq.appendleft([x,y])
#     while eq:
#         a,b = eq.popleft()
#         offset = [[a-1,b], [a+1,b],[a,b-1],[a,b+1]]
#         for i,j in offset:
#             if -1 < i < len(maps) and -1 < j < len(maps[i]):
#                 if not visit[i][j] and maps[i][j] != 'X':
#                     visit[i][j] = True
#                     num += int(maps[i][j])
#                     eq.append([i,j])
#     return num
# def solution(maps):
#     answer = []
#     visit = [[False] * len(maps[0]) for _ in range(len(maps))]
#     for x in range(len(maps)):
#         for y in range(len(maps[x])):
#             if not visit[x][y] and maps[x][y].isdigit():
#                 n = move(visit,x,y,maps,int(maps[x][y]))
#                 answer.append(n)
#     if len(answer) != 0:
#         answer.sort()
#     else:
#         answer = [-1]
#
#     return answer
# print(solution(["X591X","X1X5X","X231X", "1XXX1"]	))

# def solution(n,a,b):
#     answer = 0
#     L = []
#     List = []
#     cnt = 0
#     if  abs(a-b) == 1:
#         return 1
#     while not [a,b] in L or not [b,a] in L:
#         if answer == 0:
#             for i in range(1,n+1):
#                 cnt += 1
#                 List.append(i)
#                 if cnt == 2:
#                     L.append(List)
#                     cnt = 0
#                     List = []
#             answer += 1
#         else:
#             if a % 2 == 1:
#                 a += (a + 1) // 2
#             else:
#                 a = a //2
#             if b % 2 == 1:
#                 b += (b + 1) // 2
#             else:
#                 b = b //2
#             for l in range(1,len(L)+1):
#                 cnt += 1
#                 List.append(l)
#                 if cnt == 2:
#                     L.append(List)
#                     cnt = 0
#                     List = []
#             answer += 1
#     return answer
#
#
# print(solution(8,4,7))

# def solution(a,b):
#     answer = 0
#     while a != b:
#         a -= a//2
#         b -= b//2
#         answer += 1
#     return answer

#횟수 = 더하기 팩토리얼

def solution(n):
    answer = []
    for i in range(n):
        
    return answerdef
print(solution(4))
